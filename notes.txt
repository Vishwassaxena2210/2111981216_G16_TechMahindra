STUDY FROM DOCS(MDN)
//js => interpreted when launched now both compiled(code quality) and interpreted(fast code execution)
//single threaded and loosly typed language
//let (block scoped) cannot be redeclare but can be reassigned.
//in var we can redeclare global scope and also can reassigned the value.
//always declare all the variables on the top.
//types of loop: For, For Each, While, Do While, For in, For of
//tempate literals ${i} from ejs
//GEC global execution context
//syntax of for each 
/*
arr=[1,2,3,4,5];
arr.forEach(function(ele){
    console.log(ele);
    });

//for in loops

for(let i in arr){
    console.log(i,arr[i]);
    //arr[i] for element and i for index
    
}

//for of loops

for(let i of arr){
    console.log(i);
    //here i is value
}

//while

let i=0;
while(i<=10){
    console.log(i);
    i++;
}

//do while(runs atleast one time)

do{
    console.log("g16");
    
}
while(i<=10)
    i++;
*/
////////////////////////////////////////////////////////////

/*DOM Manipulation (DOM convert HTML code to a tree like structure)
window is the parent of document
ways to do: getElementById , getElementsByClassName , getElementByTagName
other ways: querySelector : document.querySelector(".classname"/"#idname")
document.querySelectorAll(".classname"/"#idname")

innerText: gives spaces as well
textContent: 

1> types of error messages
reference error , type error , syntax error 
2> all let , var and const are hoisted 
*/

// console.log(abc);
// sum(10,5);
// var abc=29;
// function sum(a,b) {
//     var ans=a+b;
//     return ans;
// }
// var major=sum(6,8);
// console.log(major);

//hositing

// console.log(a);
// var a=1;
// console.log(b);
// let b=2;

/*
this keyword: window object === this
lexical order : grand parent -> parent -> child(can access all from parent and grand parent)
TDZ : temporal dead zone 
console(a)                console(a) phase1
var a=5;                  let a=5;
console(a)                console(a) phase2
time between phase 1 and phase 2
*/ 
////////////////////////////////////////////
closures: a closure is a combination of a function bundled together(enclosed) with references to its surrounding state(the lexical enviroment).
*it is  bundled with its own scope and lexical order parent scope 
*they are made on top of functions
*data hiding and encapsulation
*disadvantage =>  

////////////////////////////////////////////
Set Timeout and Set Interval: are asynchronous and callbacks
SetTimeout: runs once
SetInterval: runs again and again and again
these are also callbacks
////////////////////////////////////////////
higher order functions: it can take function as argument and return a function.                                                                                         
////////////////////////////////////////////
functions => 
>function statement / function declaration
>function expression: can be named or anonymous
>anonymous function
////////////////////////////////////////////
callback: pass function as an argument and return a function
callbacks can be both asynchronous and synchronous (90% times asynchronous)
/////////////////////////////////////
parts of browser => js engine => jre
1.callstack 
2.webapis: setTimeout, setInterval,bluetooth,geolocation,console.log,url-path,camera,microphone,local storage,cookies,session
3.event loop 4.callback queue 5.microtask queue
///////////////////////////
what is an event loop?
/////////////////////////////
microtask vs marcrotask
microtask(priority high): promises 
marcrotask: setTimeout, setInterval
///////////////////////////////////////////
hof: functions as arguments & can return a function also 
benifits: optimization, readability
/////////////////////////////////////
map and filter : return array
reduce: return single value pass two arguments 
acc= accumulator
curr=current
////////////////////////////////////////////////////////////////
promises(VVIP)

promise was introduced to ignore this messy code
a asynchronous functions is attached to main function
states of promise: pending , reject , fulfilled
promise provide an object by telling state 
promise apis: 
>Promise.all():if any one is rejected it does not move ahead
>Promise.allSettled():go for all parallely if any is rejected it does not stop checking others
>Promise.race() 
>Promise.any()
///////////////////////////////////

Async & await 
kisi bhi function ko asynchronous banane mein kaam aata hai
we use try and catch with async await